name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKERHUB: docker.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend
  DOCKERHUB_USERNAME: xxng1

jobs:
  ###############################################################################
  # 1. 성능 테스트 (가장 먼저 실행)
  ###############################################################################
  performance-test:
    name: ⚡ 성능 테스트 (200건)
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 코드 체크아웃
        uses: actions/checkout@v4

      - name: 🐍 Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Python 의존성 설치
        run: |
          cd backend
          pip install -r requirements.txt

      - name: 🧪 단위 테스트 (300건)
        run: |
          cd backend
          pytest tests/unit -n 16 -v --tb=short --junit-xml=../test-results/unit-tests.xml

      - name: 📊 단위 테스트 결과 업로드
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: test-results/

  ###############################################################################
  # 2. 단위 테스트
  ###############################################################################
  unit-test:
    name: 🧪 단위 테스트 (300건)
    runs-on: ubuntu-latest
    needs: performance-test
    
    steps:
      - name: 📥 코드 체크아웃
        uses: actions/checkout@v4

      - name: 🐍 Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Python 의존성 설치
        run: |
          cd backend
          pip install -r requirements.txt

      - name: 🧪 단위 테스트 (300건)
        run: |
          cd backend
          pytest tests/unit -n 16 -v --tb=short --junit-xml=../test-results/unit-tests.xml

      - name: 📊 단위 테스트 결과 업로드
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: test-results/

  ###############################################################################
  # 3. 통합 테스트
  ###############################################################################
  integration-test:
    name: 🔗 통합 테스트 (400건)
    runs-on: ubuntu-latest
    needs: unit-test
    
    steps:
      - name: 📥 코드 체크아웃
        uses: actions/checkout@v4

      - name: 🐍 Python 설정
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: 📦 Python 의존성 설치
        run: |
          cd backend
          pip install -r requirements.txt

      - name: 🔗 통합 테스트 (400건)
        env:
          DATABASE_URL: mysql+aiomysql://searchuser:searchpass@localhost:3306/searchpilot
        run: |
          cd backend
          pytest tests/integration -n 8 -v --tb=short --junit-xml=../test-results/integration-tests.xml

      - name: 📊 통합 테스트 결과 업로드
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: test-results/


  ###############################################################################
  # 2. 빌드 및 푸시 단계
  ###############################################################################
  build:
    name: 🔨 Docker 이미지 빌드 및 푸시
    runs-on: ubuntu-latest
    needs: [performance-test, unit-test, integration-test]
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
      - name: 📥 코드 체크아웃
        uses: actions/checkout@v4

      - name: 🔐 GHCR 레지스트리 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔐 DockerHub 레지스트리 로그인
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 📝 Docker 메타데이터 추출 (GHCR)
        id: meta-backend-ghcr
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 📝 Docker 메타데이터 추출 (DockerHub)
        id: meta-backend-dockerhub
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/searchpilot-backend
          tags: |
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Backend 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: |
            ${{ steps.meta-backend-ghcr.outputs.tags }}
            ${{ steps.meta-backend-dockerhub.outputs.tags }}
          labels: ${{ steps.meta-backend-ghcr.outputs.labels }}

      - name: 📝 Frontend 메타데이터 추출 (GHCR)
        id: meta-frontend-ghcr
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 📝 Frontend 메타데이터 추출 (DockerHub)
        id: meta-frontend-dockerhub
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/searchpilot-frontend
          tags: |
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Frontend 이미지 빌드 및 푸시
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ steps.meta-frontend-ghcr.outputs.tags }}
            ${{ steps.meta-frontend-dockerhub.outputs.tags }}
          labels: ${{ steps.meta-frontend-ghcr.outputs.labels }}

      - name: 🎉 빌드 완료 알림
        if: success()
        run: |
          echo "## 🎉 CI 파이프라인 성공!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 빌드된 이미지 (GHCR)" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 빌드된 이미지 (DockerHub)" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: ${{ secrets.DOCKER_USERNAME }}/searchpilot-backend:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: ${{ secrets.DOCKER_USERNAME }}/searchpilot-frontend:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 이미지 링크" >> $GITHUB_STEP_SUMMARY
          echo "- [GHCR Backend](https://github.com/${{ github.repository }}/pkgs/container/backend)" >> $GITHUB_STEP_SUMMARY
          echo "- [GHCR Frontend](https://github.com/${{ github.repository }}/pkgs/container/frontend)" >> $GITHUB_STEP_SUMMARY
          echo "- [DockerHub Backend](https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/searchpilot-backend)" >> $GITHUB_STEP_SUMMARY
          echo "- [DockerHub Frontend](https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/searchpilot-frontend)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **ArgoCD에서 자동 배포 준비 완료!**" >> $GITHUB_STEP_SUMMARY

      - name: ❌ 빌드 실패 알림
        if: failure()
        run: |
          echo "## ❌ CI 파이프라인 실패" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "빌드 또는 테스트 단계에서 오류가 발생했습니다." >> $GITHUB_STEP_SUMMARY
          echo "로그를 확인하여 문제를 해결해주세요." >> $GITHUB_STEP_SUMMARY
